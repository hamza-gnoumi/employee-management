{"ast":null,"code":"import { DeleteConfirmDialogComponent } from '../delete-confirm-dialog/delete-confirm-dialog.component';\nimport { EmployeeFormDialogComponent } from '../employee-form-dialog/employee-form-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/employee.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/material/menu\";\nfunction EmployeeListComponent_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 4)(8, \"a\", 5);\n    i0.ɵɵelement(9, \"i\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"mat-menu\", null, 7)(12, \"button\", 8)(13, \"a\", 9);\n    i0.ɵɵlistener(\"click\", function EmployeeListComponent_tr_18_Template_a_click_13_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.OpenDialogUpdate(employee_r1.id));\n    });\n    i0.ɵɵtext(14, \" Update\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"button\", 8)(16, \"a\", 9);\n    i0.ɵɵlistener(\"click\", function EmployeeListComponent_tr_18_Template_a_click_16_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.openDialog(employee_r1.id));\n    });\n    i0.ɵɵtext(17, \" Delete\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(18, \"button\", 8)(19, \"a\", 9);\n    i0.ɵɵlistener(\"click\", function EmployeeListComponent_tr_18_Template_a_click_19_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.employeeDetails(employee_r1.id));\n    });\n    i0.ɵɵtext(20, \" View\");\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const employee_r1 = ctx.$implicit;\n    const _r2 = i0.ɵɵreference(11);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", employee_r1.firstName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", employee_r1.lastName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", employee_r1.emailId, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"matMenuTriggerFor\", _r2);\n  }\n}\nexport class EmployeeListComponent {\n  constructor(employeeService, dialog) {\n    this.employeeService = employeeService;\n    this.dialog = dialog;\n  }\n  ngOnInit() {\n    this.getEmployees();\n  }\n  getEmployees() {\n    this.employeeService.getAllEmployees().subscribe(emps => this.employees = emps);\n  }\n  //Create Employee Section\n  OpenDialogCreate() {\n    const dialogRef = this.dialog.open(EmployeeFormDialogComponent, {\n      data: {\n        typeOperation: \"Create\"\n      }\n    });\n    dialogRef.afterClosed().subscribe(rslt => {\n      if (rslt) this.saveEmployee(rslt);\n    });\n  }\n  saveEmployee(employee) {\n    this.employeeService.createEmployee(employee).subscribe(() => {\n      this.getEmployees();\n    });\n  }\n  //Update Employee Section\n  OpenDialogUpdate(id) {\n    const dialogRef = this.dialog.open(EmployeeFormDialogComponent, {\n      data: {\n        typeOperation: \"Update\",\n        id: id\n      }\n    });\n    dialogRef.afterClosed().subscribe(rslt => {\n      if (rslt) this.updateEmployee(id, rslt);\n    });\n  }\n  updateEmployee(id, employee) {\n    this.employeeService.updateEmployee(id, employee).subscribe(data => {\n      this.getEmployees();\n    });\n  }\n  // Delete Section\n  deleteEmployee(id) {\n    this.employeeService.deleteEmployee(id).subscribe(data => {\n      console.log(data);\n      this.getEmployees();\n    });\n  }\n  openDialog(id) {\n    const dialogRef = this.dialog.open(DeleteConfirmDialogComponent, {\n      data: {\n        id,\n        employees: this.employees\n      }\n    });\n    dialogRef.afterClosed().subscribe(rslt => {\n      if (rslt) this.deleteEmployee(id);\n    });\n  }\n  // Employee Details\n  employeeDetails(id) {\n    const dialogRef = this.dialog.open(EmployeeFormDialogComponent, {\n      data: {\n        typeOperation: \"detail\",\n        id: id\n      }\n    });\n  }\n}\nEmployeeListComponent.ɵfac = function EmployeeListComponent_Factory(t) {\n  return new (t || EmployeeListComponent)(i0.ɵɵdirectiveInject(i1.EmployeeService), i0.ɵɵdirectiveInject(i2.MatDialog));\n};\nEmployeeListComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EmployeeListComponent,\n  selectors: [[\"app-employee-list\"]],\n  decls: 19,\n  vars: 1,\n  consts: [[1, \"row\"], [1, \"btn\", \"btn-primary\", \"newEmp\", 3, \"click\"], [1, \"table\", \"table-striped\", \"table-bordered\"], [4, \"ngFor\", \"ngForOf\"], [1, \"text-center\"], [\"mat-button\", \"\", 1, \"btn\", 3, \"matMenuTriggerFor\"], [\"aria-hidden\", \"true\", 1, \"fa\", \"fa-ellipsis-v\"], [\"menu\", \"matMenu\"], [\"mat-menu-item\", \"\"], [1, \"btn\", 3, \"click\"]],\n  template: function EmployeeListComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \" Employee List\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"div\", 0)(4, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function EmployeeListComponent_Template_button_click_4_listener() {\n        return ctx.OpenDialogCreate();\n      });\n      i0.ɵɵtext(5, \" New Employee\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"table\", 2)(7, \"thead\")(8, \"tr\")(9, \"th\");\n      i0.ɵɵtext(10, \" First Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"th\");\n      i0.ɵɵtext(12, \" Last Name \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"th\");\n      i0.ɵɵtext(14, \" Email Id\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"th\");\n      i0.ɵɵtext(16, \" Actions \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"tbody\");\n      i0.ɵɵtemplate(18, EmployeeListComponent_tr_18_Template, 21, 4, \"tr\", 3);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(18);\n      i0.ɵɵproperty(\"ngForOf\", ctx.employees);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.MatMenu, i4.MatMenuItem, i4.MatMenuTrigger],\n  styles: [\".newEmp[_ngcontent-%COMP%] {\\r\\n  width: -moz-fit-content;\\r\\n  width: fit-content;\\r\\n  margin: 0 10px 10px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZW1wbG95ZWUtbGlzdC9lbXBsb3llZS1saXN0LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx1QkFBa0I7RUFBbEIsa0JBQWtCO0VBQ2xCLG1CQUFtQjtBQUNyQiIsInNvdXJjZXNDb250ZW50IjpbIi5uZXdFbXAge1xyXG4gIHdpZHRoOiBmaXQtY29udGVudDtcclxuICBtYXJnaW46IDAgMTBweCAxMHB4O1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["DeleteConfirmDialogComponent","EmployeeFormDialogComponent","i0","EmployeeListComponent","constructor","employeeService","dialog","ngOnInit","getEmployees","getAllEmployees","subscribe","emps","employees","OpenDialogCreate","dialogRef","open","data","typeOperation","afterClosed","rslt","saveEmployee","employee","createEmployee","OpenDialogUpdate","id","updateEmployee","deleteEmployee","console","log","openDialog","employeeDetails","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Gnam\\Documents\\spring\\projects\\springAngularProject 3\\angularclient\\src\\app\\employee-list\\employee-list.component.ts","C:\\Users\\Gnam\\Documents\\spring\\projects\\springAngularProject 3\\angularclient\\src\\app\\employee-list\\employee-list.component.html"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { Employee } from './../model/employee';\nimport { Component, OnInit } from '@angular/core';\nimport { EmployeeService } from '../services/employee.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { DeleteConfirmDialogComponent } from '../delete-confirm-dialog/delete-confirm-dialog.component';\nimport { EmployeeFormDialogComponent } from '../employee-form-dialog/employee-form-dialog.component';\n\n@Component({\n  selector: 'app-employee-list',\n  templateUrl: './employee-list.component.html',\n  styleUrls: ['./employee-list.component.css']\n})\nexport class EmployeeListComponent implements OnInit {\n  employees;\n\n  constructor(private employeeService: EmployeeService, private dialog: MatDialog) { }\n\n  ngOnInit() {\n    this.getEmployees();\n  }\n  private getEmployees() {\n    this.employeeService.getAllEmployees().subscribe(emps => this.employees = emps);\n  }\n\n\n\n\n\n\n\n  //Create Employee Section\n  OpenDialogCreate() {\n    const dialogRef = this.dialog.open(EmployeeFormDialogComponent, { data: { typeOperation: \"Create\" } });\n    dialogRef.afterClosed().subscribe(rslt => {\n      if (rslt) this.saveEmployee(rslt);\n    });\n  }\n\n  saveEmployee(employee: Employee) {\n    this.employeeService.createEmployee(employee).subscribe(() => { this.getEmployees(); });\n  }\n\n\n\n  //Update Employee Section\n  OpenDialogUpdate(id: number) {\n    const dialogRef = this.dialog.open(EmployeeFormDialogComponent, { data: { typeOperation: \"Update\", id: id } });\n    dialogRef.afterClosed().subscribe(rslt => {\n      if (rslt) this.updateEmployee(id, rslt);\n    });\n  }\n  updateEmployee(id: number, employee) {\n    this.employeeService.updateEmployee(id, employee).subscribe(data => {\n      this.getEmployees();\n\n    });\n  }\n\n  // Delete Section\n  deleteEmployee(id: number) {\n    this.employeeService.deleteEmployee(id).subscribe(data => {\n      console.log(data);\n      this.getEmployees();\n    })\n  }\n  openDialog(id: number): void {\n    const dialogRef = this.dialog.open(DeleteConfirmDialogComponent, { data: { id, employees: this.employees } });\n    dialogRef.afterClosed().subscribe(rslt => {\n      if (rslt)\n        this.deleteEmployee(id);\n    });\n\n  }\n\n  // Employee Details\n  employeeDetails(id: number) {\n    const dialogRef = this.dialog.open(EmployeeFormDialogComponent, { data: { typeOperation: \"detail\", id: id } });\n  }\n\n\n}\n\n","<div class=\"row\">\n  <h2> Employee List</h2>\n</div>\n<div class=\"row\">\n  <button (click)=\"OpenDialogCreate()\" class=\"btn btn-primary newEmp\"> New Employee</button>\n\n</div>\n\n<table class=\"table table-striped table-bordered\">\n  <thead>\n    <tr>\n      <th> First Name</th>\n      <th> Last Name </th>\n      <th> Email Id</th>\n      <th> Actions </th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let employee of employees\">\n      <td> {{ employee.firstName }} </td>\n      <td> {{ employee.lastName }} </td>\n      <td> {{ employee.emailId }} </td>\n      <td class=\"text-center\">\n        <a mat-button [matMenuTriggerFor]=\"menu\" class=\"btn\"> <i class=\"fa fa-ellipsis-v\" aria-hidden=\"true\"></i></a>\n        <mat-menu #menu=\"matMenu\">\n          <button mat-menu-item><a (click)=\"OpenDialogUpdate(employee.id)\" class=\"btn \"> Update</a></button>\n          <button mat-menu-item><a (click)=\"openDialog(employee.id)\" class=\"btn \"> Delete</a></button>\n          <button mat-menu-item><a (click)=\"employeeDetails(employee.id)\" class=\"btn\"> View</a></button>\n        </mat-menu>\n\n      </td>\n    </tr>\n  </tbody>\n</table>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}